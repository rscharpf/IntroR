\documentclass[ignorenonframetext,article,shortnames]{beamer}
%%%theme
\usetheme{Darmstadt}

%%% Adding an informative footline (this is default in Boadilla and Madrid)
\useoutertheme{infolines}

%%%mode
\mode<presentation>
\usepackage{amsmath}

\usepackage{multicol}

\usepackage{graphicx}

\usepackage{color}

\usepackage{url}

\usenavigationsymbolstemplate{}

\newcommand{\R}{\textsf{R}}
\newcommand{\Rpackage}[1]{\textit{#1}}
\newcommand{\Rfunction}[1]{\texttt{#1}}
\newcommand{\Robject}[1]{\texttt{#1}}
\newcommand{\Rclass}[1]{\Robject{#1}}
\newcommand{\graphics}{\Rpackage{graphics}}
\newcommand{\Sthree}{\textsf{S3}}
\newcommand{\Sfour}{\textsf{S4}}
\newcommand{\code}[1]{\texttt{#1}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\title[Introduction to R]{Introduction to R}

\subtitle{Reading and Writing Data}

\author[L Marchionni]{Luigi Marchionni}

\institute[JHU]{
%%  \inst{1}
  Department of Oncology\\
  Johns Hopkins School of Medicine
%%  \and
%%  \inst{2}%
%%  Department of Preventive Medicine\\
%%  Johns Hopkins Bloomberg School of Public Health
}

\date{}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}

\frame{
  \maketitle

\vspace{-2em}
\begin{center}
   \includegraphics[width=0.25\textwidth]{logo_workshop.png}
 \end{center}

 \vspace{+1em}
 \begin{center}
 Thanks to Roger Peng and Rob Scharpf!
 \end{center}

}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[c]{Outline}

%\begin{center}
\begin{multicols}{2}
\footnotesize
\tableofcontents
\end{multicols}
%\end{center}

\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Read and write data}
\subsection{Functions to read and write data}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Reading Data}
There are a few principal functions reading data into R.
\begin{itemize}
\item
\code{read.table}, \code{read.csv}, for reading tabular data
\item
\code{readLines}, for reading lines of a text file
\item
\code{source}, for reading in R code files (inverse of \code{dump})
\item
\code{dget}, for reading in R code files (inverse of \code{dput})
\item
\code{load}, for reading in saved workspaces
\item
\code{unserialize}, for reading single R objects in binary form
\end{itemize}

\begin{center}
  Note that in the past 7 years I {\bf never} used \code{dget} and \code{unserialize}!
\end{center}

\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Writing Data}
There are analogous functions for writing data to files
\begin{itemize}
\item
\code{write.table}
\item
\code{writeLines}
\item
\code{dump}
\item
\code{dput}
\item
\code{save}
\item
\code{serialize}
\end{itemize}

\begin{center}
  Note that in the past 7 years I {\bf never} used \code{dput} and \code{serialize}!
\end{center}

\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Connections}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Interfaces to the Outside World}
Data are read in using \textit{connection} interfaces.  Connections
can be made to files (most common) or to other more exotic things.
\begin{itemize}
\item
\code{file}, opens a connection to a file
\item
\code{gzfile}, opens a connection to a file compressed with gzip
\item
\code{bzfile}, opens a connection to a file compressed with bzip2
\item
\code{url}, opens a connection to a webpage
\end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{File Connections}
<<connections>>=
str(file)
@
\begin{itemize}
\item
\code{description} is the name of the file
\item
\code{open} is a code indicating
\begin{itemize}
\item
``r'' read only
\item
``w'' writing (and initializing a new file)
\item
``a'' appending
\item
``rb'', ``wb'', ``ab'' reading, writing, or appending in binary mode (Windows)
\end{itemize}
\end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Connections}
In general, connections are powerful tools that let you navigate files
or other external objects.  In practice, we often don't need to deal
with the connection interface directly.

Let's create a matrix and seve it to a file, and remove it
from our workspace:
<<writeMatrixToFile>>=
m <- matrix(1:9,ncol=3)
write.table(m, file="foo.txt", sep=",")
rm(m)
@

Let's read the file back:
<<readFromConnection>>=
con <- file("foo.txt", "r")
data <- read.csv(con)
close(con)
@
The above is the same as:
<<readFile>>=
data <- read.csv("foo.txt")
@
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Using \Rfunction{read.table}}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Reading Data Files with read.table}
The \code{read.table} function is one of the most commonly used
functions for reading data.  It has a few important arguments:
\begin{itemize}
\item
\code{file}, the name of a file, or a connection
\item
\code{header}, logical indicating if the file has a header line
\item
\code{sep}, a string indicating how the columns are separated
\item
\code{colClasses}, a character vector indicating the class of each
column in the dataset
\item
\code{nrows}, the number of rows in the dataset
\item
\code{comment.char}, a character string indicating the comment
character
\item
\code{skip}, the number of lines to skip from the beginning
\item
\code{stringsAsFactors}, should character variables be coded as
factors?
\end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{read.table}
For small to moderately sized datasets, you can usually call
\code{read.table} without specifying any other arguments
<<readFoo1>>=
data <- read.table("foo.txt")
@
R will automatically:
\begin{itemize}
\item
skip lines that begin with a \#
\item
figure out how many rows there are (and how much memory needs to be
allocated)
\item
figure what type of variable is in each column of the table
\end{itemize}

Telling R all these things directly makes R run faster and more
efficiently.
\begin{itemize}
\item
\code{read.csv} is identical to \code{read.table} except that the
default separator is a comma.
\end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Reading in Larger Datasets with read.table}
With much larger datasets, doing the following things will make your
life easier and will prevent R from choking.
\begin{itemize}
\item
Read the help page for \code{read.table}, which contains many hints
\item
Make a rough calculation of the memory required to store your dataset.
If the dataset is larger than the amount of RAM on your computer, you
can probably stop right here.
\item
Set \code{comment.char = ""} if there are no commented lines in your
file.
\end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Reading in Larger Datasets with read.table}
\begin{itemize}
\item
Use the \code{colClasses} argument.  Specifying this option instead of
using the default can make 'read.table' run MUCH faster, often twice
as fast. In order to use this option, you have to know the class of
each column in your data frame. If all of the columns are ``numeric'',
for example, then you can just set \code{colClasses = "numeric"}.  A
quick an dirty way to figure out the classes of each column is the
following:
<<readTable1, echo=TRUE, eval=FALSE>>=
initial <- read.table("datatable.txt", nrows = 100)
classes <- sapply(initial, class)
tabAll <- read.table("datatable.txt",
                     colClasses = classes)
@
\item
Set \code{nrows}.  This doesn't make R run faster but it helps with
memory usage.  A mild overestimate is okay.  You can use the Unix tool
\code{wc} to calculate the number of lines in a file.
\end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Know your system}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Know Thy System}
In general, when using R with larger datasets, it's useful to know a
few things about your system.
\begin{itemize}
\item
How much memory is available?
\item
What other applications are in use?
\item
Are there other users logged into the same system?
\item
What operating system?
\item
Is the OS 32 or 64 bit?
\end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Calculating Memory Requirements}
I have a data frame with 1,500,000 rows and 120 columns, all of which
are numeric data.  Roughly, how much memory is required to store this
data frame?
\begin{eqnarray*}
1,500,000\times 120 \times\mbox{$8$ bytes/numeric}
& = &
1440000000\mbox{ bytes}\\
& = &
1440000000 / 2^{20}\mbox{ bytes/MB}\\
& = &
1,373.29\mbox{ MB}\\
& = &
1.34\mbox{ GB}
\end{eqnarray*}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Saving data}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Saving Data in Non-tabular Forms}
For temporary storage or for transport, it is more efficient to save
data in (compressed) binary form using \code{save} or
\code{save.image}.
<<saveAndLoad>>=
x <- 1
y <- data.frame(a = 1, b = "a")
save(x, y, file = "data.rda")
rm(list=ls())  ###removes all objects from workspace
ls()
load("data.rda")  ## reads the saved objects back!
ls()
@
Binary formats are not great for long-term storage because if they are
corrupted, recovery is usually not possible.
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Writing text files}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Reading Lines of a Text File}
The \code{readLines} function can be used to simply read lines of a
text file and store them in a character vector.
Similarly \code{writeLines} takes a character vector and writes each element one
line at a time to a text file.

Let's create, write, and read in a vector:
<<writeFile>>=
x <- c("soccer is ", "far better", "than football")
writeLines(x, con=file("words.txt"))
con <- gzfile("words.txt")
pippo <- readLines(con, 6)
pippo
@
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Reading Lines of a Text File cont'd}
\code{readLines} can be useful for reading in lines of webpages
<<readLines>>=
## This might take time
con <- url("http://genomics.jhu.edu", "r")
x <- readLines(con)
head(x, n=3)
@
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Data Output Summary}
\begin{itemize}
\item
\code{write.table}, \code{write.csv} --- readable output, textual,
little metadata
\item
\code{save}, \code{save.image} --- exact
representation, efficient storage if compressed, not recoverable if
corrupted
\end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{References}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[allowframebreaks]{Useful References}

  \begin{multicols}{2}
    \tiny{
      \begin{thebibliography}{Tufte1983}
      \bibitem[Tukey, 1977]{Tukey1977}
        J.W.~Tukey
        \newblock {\em Exploratory Data Analysis}
        \newblock Addison-Wesley Publishing Co Inc, 1977.

   \bibitem[Murrell, 2006]{Murrell2006}
     P.~Murrell
     \newblock {\em \R{} Graphics}
     \newblock Chapman \& Hall/CRC, 2006.

   \bibitem[Sarkar, 2008]{Sarkar2008}
     D.~Sarkar
     \newblock{\em Lattice: {M}ultivariate Data Visualization with \R{}}
     \newblock Springer-Verlag, 2008.

   \bibitem[Dalgaard, 2002]{Dalgaard2002}
     P.~Dalgaard
     \newblock {\em Introductory Statistics with \R{}}
     \newblock Springer, 2002.

   \bibitem[Tufte, 1983]{Tufte1983}
     E.R.~Tufte.
     \newblock {\em The Visual Display of Quantitative Information}
     \newblock Graphics Press, 1983.

     \bibitem[Wickham, 2009]{Wickham2009}
       H.~Wickham
       \newblock {\em ggplot2: elegant graphics for data analysis}
       \newblock Springer, 2009

     \bibitem[Hastie, 2003]{Hastie2003}
       T.~Hastie, R.~Tibshirani, and J.~Friedman
       \newblock{\em The Elements of Statistical Learning: Data Mining,
         Inference, and Prediction}
       \newblock Springer, 2003.

       \bibitem[Gentleman, 2009]{Gentleman2009}
         R.~Gentleman
         \newblock{\em \R{} Programming for Bioinformatics}
         \newblock CRC Press, 2009.

       \bibitem[Chambers, 2008]{Chambers2008}
         J.M.~Chambers
         \newblock{\em Software for Data Analysis: Programming with \R{}}
         \newblock Springer, 2008
\end{thebibliography}
}
\end{multicols}

\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]
  \frametitle{Session Information}

<<sessionInfo,results=tex>>=
toLatex(sessionInfo())
@

\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<clean>>=
unlink("foo.txt")
unlink("words.txt")
unlink("data.rda")
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\end{document}

